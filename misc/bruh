<!DOCTYPE html>
<svg width="960" height="1100"></svg>
<script src="https://d3js.org/d3.v7.min.js"></script>
<script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>
<script src="https://d3js.org/topojson.v2.min.js"></script>
<script>

var svg = d3.select("svg"),
    width = +svg.attr("width"),
    height = +svg.attr("height");

var path = d3.geoPath();

var color = d3.scaleThreshold()
    .domain([1, 10, 50, 200, 500, 1000, 2000, 4000])
    .range(d3.schemeOrRd[9]);

var x = d3.scaleSqrt()
    .domain([0, 4500])
    .rangeRound([440, 950]);

var g = svg.append("g")
    .attr("class", "key")
    .attr("transform", "translate(0,40)");

g.selectAll("rect")
  .data(color.range().map(function(d) {
      d = color.invertExtent(d);
      if (d[0] == null) d[0] = x.domain()[0];
      if (d[1] == null) d[1] = x.domain()[1];
      return d;
    }))
  .enter().append("rect")
    .attr("height", 8)
    .attr("x", function(d) { return x(d[0]); })
    .attr("width", function(d) { return x(d[1]) - x(d[0]); })
    .attr("fill", function(d) { return color(d[0]); });

g.append("text")
    .attr("class", "caption")
    .attr("x", x.range()[0])
    .attr("y", -6)
    .attr("fill", "#000")
    .attr("text-anchor", "start")
    .attr("font-weight", "bold")
    .text("Population per square mile");

g.call(d3.axisBottom(x)
    .tickSize(13)
    .tickValues(color.domain()))
  .select(".domain")
    .remove();

var div = d3.select("body").append("div")
    .attr("class","tooltip")
    .style("opacity",1);

d3.csv("Population-Density By County.csv").then((pdd)=>{
  //get county data
  const densityMap = new Map();
  for(let i = 0; i < pdd.length;i++)
  {
    densityMap.set(pdd[i]["GCT_STUB.target-geo-id2"], pdd[i]["Density per square mile of land area"]);
    densityMap.set(pdd[i]["GCT_STUB.target-geo-id2"] + "name", pdd[i]["GCT_STUB.display-label"]);
  }
  //get map

  d3.json("us-10m.json").then((topology)=> {
    svg.append("g")
    .attr("class", "states")
    .selectAll("path")
    .data(topojson.feature(topology, topology.objects.counties).features)
    .enter().append("path")
    .filter(function(d){
      if(30001 <= d.id && d.id <= 30111)
        console.log(d.id);
      return (30001 <= d.id && d.id <= 30111);
    })

    //color denstity
    .attr("fill",function(d){
        console.log(color(densityMap.get(""+ d.id)));
        return (color(densityMap.get(""+d.id)));
      })
      .attr("transform","translate(2000,600)")
      .attr("class",function(d){
        return d3.quantize(densityMap.get(""+d.id));
      })
      //tooltip popup
      .attr("d",path)
      .on("mouseover",function(event,d){
        div.transition()
          .duration(200)
          .style("opacity",.9);
          div.html(densityMap.get(d.id+"name")+"<\br>" + "Population Density: " + densityMap.get(""+d.id) + " People per square mile")
            .style("left",(event.pageX)+"px")
            .style("top",(event.pageY-20)+"px")


  });
/*
  d3.json("us-10m.json").then((usd) =>{
    svg.append("g")
      .attr("class", "states")
      .selectAll("path")
      .data(topojson.feature(usd,usd.objects.counties).features)
      .enter().append("path")
      .filter(function(d){
        if(30001 <= d.id && d.id <= 30111)
          console.log(d.id);
        return (30001 <= d.id && d.id <= 30111);
      })

      //color denstity
      .attr("fill",function(d){
        console.log(color(densityMap.get(""+ d.id)));
        return (color(densityMap.get(""+d.id)));
      })
      .attr("transform","translate(2000,600)")
      .attr("class",function(d){
        return d3.quantize(densityMap.get(""+d.id));
      })
      tooltip popup
      .attr("d",path)
      .on("mouseover",function(event,d){
        div.transition()
          .duration(200)
          .style("opacity",.9);
          div.html(densityMap.get(d.id+"name")+"<\br>" + "Population Density: " + densityMap.get(""+d.id) + " People per square mile")
            .style("left",(event.pageX)+"px")
            .style("top",(event.pageY-20)+"px")

      });
      */
  });
});





</script>
